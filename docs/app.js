// Global variable to store all articles
let allArticles = [];

// Load articles from pre-generated JSON (generated by GitHub Actions)
async function loadArticlesFromJSON() {
    try {
        console.log('Loading articles from JSON...');
        const VERSION = new Date().toISOString().slice(0, 10);
        const response = await fetch(`./mma-news.json?v=${VERSION}`, { cache: 'no-store' });
        
        if (!response.ok) {
            console.warn('JSON file not found. Please run fetch_feeds.py or enable GitHub Actions.');
            return null;
        }
        
        const data = await response.json();
        console.log(`âœ“ Loaded ${data.articles.length} articles from JSON`);
        return data.articles;
    } catch (error) {
        console.warn('Could not load JSON:', error.message);
        return null;
    }
}

// Remove HTML tags from description
function cleanDescription(text) {
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = text;
    return tempDiv.textContent || tempDiv.innerText || '';
}

// Format date for display
function formatDate(date) {
    const now = new Date();
    const dateObj = new Date(date);
    const diffMs = now - dateObj;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return 'Just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    if (diffHours < 24) return `${diffHours}h ago`;
    if (diffDays < 7) return `${diffDays}d ago`;
    
    return dateObj.toLocaleDateString();
}

// Create HTML for a single article
function createArticleCard(article) {
    // Use thumbnail with proxy if available, otherwise use placeholder
    const imageUrl = article.thumbnail 
        ? `https://images.weserv.nl/?url=${encodeURIComponent(article.thumbnail)}`
        : './logo-placeholder.png';
    
    return `
        <article>
            <img src="${imageUrl}" alt="" class="article-thumb" onerror="this.src='./logo-placeholder.png'">
            <div class="article-content">
                <div class="article-source">${article.source}</div>
                <h2 class="article-title">
                    <a href="${article.link}" target="_blank" rel="noopener noreferrer">${article.title}</a>
                </h2>
                <div class="article-footer">
                    <a href="${article.link}" target="_blank" rel="noopener noreferrer" style="color: var(--muted); font-size: 0.8rem;">${formatDate(article.pubDate)}</a>
                </div>
            </div>
        </article>
    `;
}

// Search function - filters articles based on query
function searchArticles(query) {
    if (!query.trim()) {
        return allArticles;
    }

    const lowerQuery = query.toLowerCase();

    return allArticles.filter(article => {
        const title = article.title.toLowerCase();
        const description = article.description.toLowerCase();
        const source = article.source.toLowerCase();

        return title.includes(lowerQuery) || 
               description.includes(lowerQuery) || 
               source.includes(lowerQuery);
    });
}

// Render articles to the DOM
function renderArticles(articles) {
    const container = document.getElementById('articles-container');
    
    if (articles.length === 0) {
        container.innerHTML = '<p style="grid-column: 1/-1; text-align: center; color: #888; padding: 2rem;">No articles found.</p>';
    } else {
        container.innerHTML = articles
            .map(article => createArticleCard(article))
            .join('');
    }
}

// Handle search input
function setupSearchHandlers() {
    const searchInput = document.getElementById('t2d-q');

    // Prevent form submission (e.g., "search" key / magnifier action) from clearing input
    const searchForm = document.querySelector('form.search');
    if (searchForm) {
        searchForm.addEventListener('submit', (e) => {
            e.preventDefault();
            // Keep current value; just (re)filter based on whatever is typed
            const current = searchInput.value || '';
            renderArticles(searchArticles(current));
        }, { passive: false });
    }


    if (!searchInput) {
        console.warn('Search input not found');
        return;
    }

    // Listen for input changes
    searchInput.addEventListener('input', (e) => {
        const query = e.target.value;

        // Search and render results
        const results = searchArticles(query);
        renderArticles(results);
    });
}

// Header shadow on scroll
function setupHeaderScroll() {
    const header = document.querySelector('header.site');
    if (!header) return;

    window.addEventListener('scroll', () => {
        if (window.scrollY > 8) {
            header.classList.add('shadow');
        } else {
            header.classList.remove('shadow');
        }
    }, { passive: true });
}

// Main function to load articles
async function loadArticles() {
    const loadingEl = document.getElementById('loading');

    try {
        // Try to load from pre-generated JSON first
        let articles = await loadArticlesFromJSON();
        
        if (!articles) {
            loadingEl.textContent = 'No articles available. Please ensure fetch_feeds.py has been run.';
            return;
        }

        allArticles = articles;

        // Clear loading message
        loadingEl.style.display = 'none';

        // Render initial articles
        renderArticles(allArticles);

        // Setup search functionality
        setupSearchHandlers();

        // Setup header scroll behavior
        setupHeaderScroll();

        // Update last updated time
        const lastUpdated = document.getElementById('last-updated');
        if (lastUpdated) {
            lastUpdated.textContent = new Date().toLocaleTimeString();
        }
    } catch (error) {
        console.error('Fatal error:', error);
        loadingEl.textContent = 'Error loading articles.';
    }
}

// Load articles when page loads
document.addEventListener('DOMContentLoaded', loadArticles);


// === Header Date (auto) ===
(function initHeaderDate(){
  const el = document.getElementById('hdr-date');
  if (!el) return;
  try {
    // Use US month short name in uppercase, NY timezone
    const tz = 'America/New_York';
    const now = new Date();
    const month = now.toLocaleString('en-US', { month: 'short', timeZone: tz }).toUpperCase();
    const day = now.toLocaleString('en-US', { day: 'numeric', timeZone: tz });
    const year = now.toLocaleString('en-US', { year: 'numeric', timeZone: tz });
    el.textContent = `${month} ${day}, ${year}`;
  } catch (e) {
    // Fallback without timezone if something goes wrong
    const now = new Date();
    const month = now.toLocaleString('en-US', { month: 'short' }).toUpperCase();
    const day = now.getDate();
    const year = now.getFullYear();
    el.textContent = `${month} ${day}, ${year}`;
  }
})();
